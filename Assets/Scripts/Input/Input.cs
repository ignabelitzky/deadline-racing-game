//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/TumblerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TumblerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TumblerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TumblerInput"",
    ""maps"": [
        {
            ""name"": ""Tumbler"",
            ""id"": ""ae0a52b3-1867-4b30-ab87-78ab61ab0c2a"",
            ""actions"": [
                {
                    ""name"": ""FlipCar"",
                    ""type"": ""Button"",
                    ""id"": ""f64e6d68-8480-43b8-bc5d-9aa4e73bc47d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ResetCar"",
                    ""type"": ""Button"",
                    ""id"": ""2ad2351d-a43c-45c2-a898-68adcd219d84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Value"",
                    ""id"": ""ff05be07-f670-4087-916d-77a24909125a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchDriveMode"",
                    ""type"": ""Button"",
                    ""id"": ""be1c406f-7af1-4409-af4d-0c3decb6b80f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""Value"",
                    ""id"": ""e629f86f-0c8c-414f-95b7-6820f0b4e88e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""fecdbef0-bcd8-40f6-8d1c-1d9c48764006"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Throttle"",
                    ""type"": ""Value"",
                    ""id"": ""cc35143d-1d9c-48fb-b21c-5978ab532d6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""8d80f83b-ec5e-4f99-aaab-3ec5acc4589e"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ecf621e7-e41d-4a81-bb79-0f990ca451b9"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlipCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bfb5dd7-b55a-4a91-a44b-28083c8ed9b1"",
                    ""path"": ""<XInputController>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ResetCar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2226d9af-73e3-4595-8d0d-181295cf3715"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf0562a3-96f0-4d68-9a85-54da7ce104c0"",
                    ""path"": ""<XInputController>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDriveMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fdabd10-4e82-4fe7-8ecd-68948d187ad8"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a075b6df-d4c3-4eb2-b3b8-6e465f431d51"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""263bf203-79cb-43c5-ad21-9d9a42323bd0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""2bb85e44-84f3-4a92-b4fb-3095c9d965c4"",
                    ""path"": ""<XInputController>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""13a157f0-f786-4afc-b79d-d5ee0f6dae78"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""69d59079-977b-450f-bcc1-6892fdb9ce7c"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tumbler
        m_Tumbler = asset.FindActionMap("Tumbler", throwIfNotFound: true);
        m_Tumbler_FlipCar = m_Tumbler.FindAction("FlipCar", throwIfNotFound: true);
        m_Tumbler_ResetCar = m_Tumbler.FindAction("ResetCar", throwIfNotFound: true);
        m_Tumbler_Boost = m_Tumbler.FindAction("Boost", throwIfNotFound: true);
        m_Tumbler_SwitchDriveMode = m_Tumbler.FindAction("SwitchDriveMode", throwIfNotFound: true);
        m_Tumbler_Handbrake = m_Tumbler.FindAction("Handbrake", throwIfNotFound: true);
        m_Tumbler_Brake = m_Tumbler.FindAction("Brake", throwIfNotFound: true);
        m_Tumbler_Throttle = m_Tumbler.FindAction("Throttle", throwIfNotFound: true);
        m_Tumbler_Steer = m_Tumbler.FindAction("Steer", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tumbler
    private readonly InputActionMap m_Tumbler;
    private List<ITumblerActions> m_TumblerActionsCallbackInterfaces = new List<ITumblerActions>();
    private readonly InputAction m_Tumbler_FlipCar;
    private readonly InputAction m_Tumbler_ResetCar;
    private readonly InputAction m_Tumbler_Boost;
    private readonly InputAction m_Tumbler_SwitchDriveMode;
    private readonly InputAction m_Tumbler_Handbrake;
    private readonly InputAction m_Tumbler_Brake;
    private readonly InputAction m_Tumbler_Throttle;
    private readonly InputAction m_Tumbler_Steer;
    public struct TumblerActions
    {
        private @TumblerInput m_Wrapper;
        public TumblerActions(@TumblerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @FlipCar => m_Wrapper.m_Tumbler_FlipCar;
        public InputAction @ResetCar => m_Wrapper.m_Tumbler_ResetCar;
        public InputAction @Boost => m_Wrapper.m_Tumbler_Boost;
        public InputAction @SwitchDriveMode => m_Wrapper.m_Tumbler_SwitchDriveMode;
        public InputAction @Handbrake => m_Wrapper.m_Tumbler_Handbrake;
        public InputAction @Brake => m_Wrapper.m_Tumbler_Brake;
        public InputAction @Throttle => m_Wrapper.m_Tumbler_Throttle;
        public InputAction @Steer => m_Wrapper.m_Tumbler_Steer;
        public InputActionMap Get() { return m_Wrapper.m_Tumbler; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TumblerActions set) { return set.Get(); }
        public void AddCallbacks(ITumblerActions instance)
        {
            if (instance == null || m_Wrapper.m_TumblerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TumblerActionsCallbackInterfaces.Add(instance);
            @FlipCar.started += instance.OnFlipCar;
            @FlipCar.performed += instance.OnFlipCar;
            @FlipCar.canceled += instance.OnFlipCar;
            @ResetCar.started += instance.OnResetCar;
            @ResetCar.performed += instance.OnResetCar;
            @ResetCar.canceled += instance.OnResetCar;
            @Boost.started += instance.OnBoost;
            @Boost.performed += instance.OnBoost;
            @Boost.canceled += instance.OnBoost;
            @SwitchDriveMode.started += instance.OnSwitchDriveMode;
            @SwitchDriveMode.performed += instance.OnSwitchDriveMode;
            @SwitchDriveMode.canceled += instance.OnSwitchDriveMode;
            @Handbrake.started += instance.OnHandbrake;
            @Handbrake.performed += instance.OnHandbrake;
            @Handbrake.canceled += instance.OnHandbrake;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Throttle.started += instance.OnThrottle;
            @Throttle.performed += instance.OnThrottle;
            @Throttle.canceled += instance.OnThrottle;
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
        }

        private void UnregisterCallbacks(ITumblerActions instance)
        {
            @FlipCar.started -= instance.OnFlipCar;
            @FlipCar.performed -= instance.OnFlipCar;
            @FlipCar.canceled -= instance.OnFlipCar;
            @ResetCar.started -= instance.OnResetCar;
            @ResetCar.performed -= instance.OnResetCar;
            @ResetCar.canceled -= instance.OnResetCar;
            @Boost.started -= instance.OnBoost;
            @Boost.performed -= instance.OnBoost;
            @Boost.canceled -= instance.OnBoost;
            @SwitchDriveMode.started -= instance.OnSwitchDriveMode;
            @SwitchDriveMode.performed -= instance.OnSwitchDriveMode;
            @SwitchDriveMode.canceled -= instance.OnSwitchDriveMode;
            @Handbrake.started -= instance.OnHandbrake;
            @Handbrake.performed -= instance.OnHandbrake;
            @Handbrake.canceled -= instance.OnHandbrake;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Throttle.started -= instance.OnThrottle;
            @Throttle.performed -= instance.OnThrottle;
            @Throttle.canceled -= instance.OnThrottle;
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
        }

        public void RemoveCallbacks(ITumblerActions instance)
        {
            if (m_Wrapper.m_TumblerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITumblerActions instance)
        {
            foreach (var item in m_Wrapper.m_TumblerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TumblerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TumblerActions @Tumbler => new TumblerActions(this);
    public interface ITumblerActions
    {
        void OnFlipCar(InputAction.CallbackContext context);
        void OnResetCar(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnSwitchDriveMode(InputAction.CallbackContext context);
        void OnHandbrake(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnThrottle(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
    }
}
